const express = require('express');
const router = express.Router();
const DataCapex = require('../models/datacapex');
const authMiddleware = require('../middlewares/authmiddleware');

// Create a DataCapex entry
router.post('/', authMiddleware, async (req, res) => {
    try {
        const dataCapex = new DataCapex(req.body);
        await dataCapex.save();
        res.status(201).json(dataCapex);
    } catch (error) {
        res.status(400).json({ message: error.message });
    }
});

// Read all DataCapex entries
router.get('/', authMiddleware, async (req, res) => {
    try {
        const dataCapexEntries = await DataCapex.find();
        res.json(dataCapexEntries);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Read a single DataCapex entry by ID
router.get('/:id', authMiddleware, async (req, res) => {
    try {
        const dataCapex = await DataCapex.findById(req.params.id);
        if (!dataCapex) {
            return res.status(404).json({ message: 'DataCapex entry not found' });
        }
        res.json(dataCapex);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Update a DataCapex entry
router.put('/:id', authMiddleware, async (req, res) => {
    try {
        const dataCapex = await DataCapex.findById(req.params.id);
        if (!dataCapex) {
            return res.status(404).json({ message: 'DataCapex entry not found' });
        }
        Object.assign(dataCapex, req.body);
        await dataCapex.save();
        res.json(dataCapex);
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

// Delete a DataCapex entry
router.delete('/:id', authMiddleware, async (req, res) => {
    try {
        const dataCapex = await DataCapex.findById(req.params.id);
        if (!dataCapex) {
            return res.status(404).json({ message: 'DataCapex entry not found' });
        }
        await DataCapex.deleteOne({ _id: req.params.id });
        res.json({ message: 'DataCapex entry deleted' });
    } catch (error) {
        res.status(500).json({ message: error.message });
    }
});

module.exports = router;
